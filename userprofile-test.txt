import React from 'react';
import { render, waitFor, screen } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect'; // for better matchers

import UserProfile from './UserProfile'; 

describe('UserProfile Component', () => {
  it('should display "Loading..." when fetching user data', async () => {
    render(<UserProfile userId={1} />);
    expect(screen.getByText('Loading...')).toBeInTheDocument();
    await waitFor(() => expect(screen.getByText('Loading...')).not.toBeInTheDocument());
  });

  it('should display error message when data fetching fails', async () => {
    jest.spyOn(global, 'fetch').mockImplementation(() =>
      Promise.resolve({
        ok: false,
        json: () => Promise.resolve({}),
      })
    );

    render(<UserProfile userId={1} />);
    await waitFor(() => expect(screen.getByText('Error: Failed to fetch user data')).toBeInTheDocument());

    global.fetch.mockRestore();
  });

  it('should display user name and email when data fetching is successful', async () => {
    const mockUserData = {
      name: 'John Doe',
      email: 'john.doe@example.com',
    };

    jest.spyOn(global, 'fetch').mockImplementation(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockUserData),
      })
    );

    render(<UserProfile userId={1} />);
    await waitFor(() => expect(screen.getByText(mockUserData.name)).toBeInTheDocument());
    await waitFor(() => expect(screen.getByText(`Email: ${mockUserData.email}`)).toBeInTheDocument());

    global.fetch.mockRestore();
  });
});
